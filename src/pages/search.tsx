import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import BlogItem from '../components/BlogItem';
import PageTitle from '../components/PageTitle';
import ProductItem from '../components/ProductItem';
import { BlogData, Product } from '../types';

interface SearchProps {
  dataBlogs: BlogData[];
  dataProducts: Product[];
}

const Search: NextPage<SearchProps> = ({ dataBlogs, dataProducts }) => {
  return (
    <>
      <Head>
        <title>Store - Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title="Search" />

      <div className="bg0 m-t-23 p-b-140 mt-5">
        <div className="container">
          {/* blogs  */}

          {dataBlogs.length > 0 && (
            <>
              <h2 className="mb-5">Blogs</h2>
              <div className="row isotope-grid">
                {/* blog skeleton - search result */}
                <div className="col-4">
                  {dataBlogs.map((blog) => {
                    return <BlogItem key={blog.id} blogData={blog} />;
                  })}
                </div>
                {/* !! */}
              </div>
            </>
          )}

          {/* products */}
          {dataProducts.length > 0 && (
            <>
              <h2 className="mb-5">Products</h2>
              <div className="row isotope-grid">
                {/* product skeleton */}
                {dataProducts.map((product) => {
                  return <ProductItem key={product.id} featureProduct={product} />;
                })}

                {/* !! */}
              </div>
            </>
          )}

          {dataBlogs.length === 0 && dataProducts.length === 0 && <p>There are no results with your search.</p>}
        </div>
      </div>
    </>
  );
};

export default Search;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const resBlogs = await fetch(`http://localhost:5001/blogs?q=${query.searchTerm}`);
  const dataBlogs: BlogData[] = await resBlogs.json();

  const resProducts = await fetch(`http://localhost:5001/products?q=${query.searchTerm}`);
  const dataProducts: Product[] = await resProducts.json();

  return {
    props: {
      dataBlogs,
      dataProducts,
    },
  };
};
